# Nom du workflow
name: s5-jeanmichel-le-symfony-build-artifact

# Déclencheurs du workflow
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-artifact:
    runs-on: ubuntu-latest

    steps:
      # 1. Récupération du code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configuration de PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, curl, zip, bcmath, intl, ctype
          tools: composer:v2

      # 3. Installation des dépendances PHP
      - name: Install PHP dependencies
        working-directory: ./ressources/s5/jeanmichel-le/projets/ci-cd-symfony
        run: composer install --no-dev --optimize-autoloader --ignore-platform-reqs

      # 4. Création du fichier .env.local.php
      - name: Dump environment variables for production
        working-directory: ./ressources/s5/jeanmichel-le/projets/ci-cd-symfony
        run: composer dump-env prod
        env:
          APP_ENV: prod
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # 5. Installation des assets JS
      - name: Install JavaScript assets via ImportMap
        working-directory: ./ressources/s5/jeanmichel-le/projets/ci-cd-symfony
        run: php bin/console importmap:install

      # 6. Compilation des assets
      - name: Compile assets with AssetMapper
        working-directory: ./ressources/s5/jeanmichel-le/projets/ci-cd-symfony
        run: php bin/console asset-map:compile

      # 7. Création de l'archive de l'artefact
      - name: Create Artifact Archive
        working-directory: ./ressources/s5/jeanmichel-le/projets/ci-cd-symfony
        run: |
          tar -czvf ../../../../../symfony-artifact-r1.tar.gz \
            --exclude=.git \
            --exclude=.github \
            --exclude=node_modules \
            --exclude=var/cache/* \
            --exclude=var/log/* \
            --exclude=tests \
            --exclude=.env \
            --exclude=docker \
            --exclude=docker-compose.yml \
            --exclude=README.md \
            --exclude=*.log \
            --exclude=*.gitignore \
            --exclude=composer.lock \
            .

      # 8. Upload de l'artefact
      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: symfony-artifact-r1
          path: ./ressources/s5/jeanmichel-le/projets/ci-cd-symfony/symfony-artifact-r1.tar.gz

  deploy-to-server:
    needs: build-artifact
    runs-on: ubuntu-latest

    steps:
      # 1. Téléchargement de l’artefact
      - name: Download Symfony artifact
        uses: actions/download-artifact@v4
        with:
          name: symfony-artifact-r1




      # 2. Configuration de la clé SSH
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # 3. Test de la connexion SSH (facultatif mais utile pour debug)
      - name: Test SSH connection
        run: ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo ✅ Connexion SSH réussie"

      # 4. Copie de l’artefact sur le serveur
      - name: Copy artifact to server via SCP
        run: scp symfony-artifact-r1.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/my-app/

      # 5. Déploiement distant
      - name: Deploy Artifact on remote server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /var/www/my-app/
            tar -xvf symfony-artifact-r1.tar.gz
            rm symfony-artifact-r1.tar.gz
            composer install --no-dev --optimize-autoloader --ignore-platform-reqs
            php bin/console doctrine:migrations:migrate --no-interaction
            php bin/console cache:clear --env=prod
            php bin/console cache:warmup --env=prod
            sudo systemctl restart apache2
          EOF
